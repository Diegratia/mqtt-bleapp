var mqtt = require("mqtt");
const { KalmanFilter } = require("kalman-filter");

var Topic = "test/topic";
var Broker_URL = "mqtt://localhost:1884";

var options = {
  clientId: "KlienGweh",
  username: "test1",
  password: "test1",
};

const windowSize = 20; // Define the window size for moving average
const rssiBuffers = new Map(); // Store RSSI buffers per dmac
const kFilter = new KalmanFilter(); // Kalman filter instance

// Function to calculate Moving Average (MA) per device (dmac)
function calculateMovingAverage(dmac, newRssi) {
  if (!rssiBuffers.has(dmac)) {
    rssiBuffers.set(dmac, []);
  }

  const buffer = rssiBuffers.get(dmac);
  buffer.push(newRssi);

  if (buffer.length > windowSize) {
    buffer.shift(); // Maintain window size
  }

  // Calculate moving average
  const avg = buffer.reduce((acc, val) => acc + val, 0) / buffer.length;
  return avg;
}

function startMqttClient(messageCallback) {
  var client = mqtt.connect(Broker_URL, options);
  client.on("connect", mqtt_connect);
  client.on("error", mqtt_error);
  client.on("message", mqtt_messageReceived);

  function mqtt_connect() {
    client.subscribe(Topic, mqtt_subscribe);
  }

  function mqtt_subscribe(err, granted) {
    console.log("Subscribed to " + Topic);
    if (err) {
      console.log(err);
    }
  }

  function mqtt_error(err) {
    console.log("MQTT error:", err);
  }

  function mqtt_messageReceived(topic, message, packet) {
    try {
      var message_str = message.toString();
      var data = JSON.parse(message_str);

      if (data.obj) {
        data.obj.forEach((beacon) => {
          if (beacon.rssi !== undefined && !isNaN(beacon.rssi)) {
            console.log(
              `Received RSSI: ${beacon.rssi} for dmac: ${beacon.dmac}`
            );

            // Step 1: Apply Moving Average (MA) for smoothing the signal
            const avgRssi = calculateMovingAverage(beacon.dmac, beacon.rssi);
            console.log(
              `Moving Average RSSI for ${beacon.dmac}: ${avgRssi.toFixed(2)}`
            );

            // Step 2: Apply Kalman Filter for further smoothing
            const filteredRssi = kFilter.filter(avgRssi);
            console.log(
              `Kalman Filtered RSSI for ${beacon.dmac}: ${filteredRssi.toFixed(
                2
              )}`
            );

            // Step 3: Send filtered data to callback or process further
            // e.g., messageCallback(filteredRssi);
          } else {
            console.log(`Invalid RSSI value: ${beacon.rssi}`);
          }
        });
      }
    } catch (error) {
      console.error("Error parsing message:", error.message);
    }
  }

  return client;
}

module.exports = { startMqttClient };
